#include <iostream>
using namespace std;

int maximumSum(int arr[],int len){
   int sum = 0;
   int max_sum = arr[0];

   for(int i=0;i<len;i++){
    sum += arr[i];
     if(sum > max_sum){
        max_sum = sum;
     }

     if(sum < 0){
        sum = 0;
     }
   }

   return max_sum;
}

int main(){
    int arr[] = {-2,1,-3,4,-1,2,1,-5,4};
    int len = sizeof(arr) / sizeof(arr[0]);
    int output = maximumSum(arr,len);
    cout << "This is the maximumSum of the array" << output;
}



Sum = 0;
max sum = arr[0] = -2;
len = 9;

i = 0;
= 0 + (-2) = -2 = 0;
i= 1;
= 0 + 1 = 1;
i=2;
= 1 -3 = -2 = 0;
i=3;
= 0 + 4 = 4;
i= 4;
= 4 -1 = 3;
i = 5;
= 3 + 2 = 5;
i= 6;
= 6;
i = 7;
= 7 - 5 = 2;
i = 8;
= 4 + 2 = 6;


Accordig Kandens Algorithams

#include <iostream>
#include <vector>
#include <climits>
using namespace std;


int maximumSum(const vector<int>& arr) {
  int current_value = arr[0];
  int total_value = arr[0];

  for(int i=1; i< arr.size(); i++){
    current_value = max(arr[i],current_value+arr[i]);
     if(current_value > total_value){
        total_value = current_value;
     }
  }
  return total_value;
}

int main(){
    vector<int> arr = {-2,1,-3,4,-1,2,1,-5,4};
    int output = maximumSum(arr);
    cout << "This is the maximumSum of the array " << output;
    return 0;
}






